#!/usr/bin/env python3

import hashlib
import io
import json
import os
import pathlib

import PIL.Image
import requests

ROOT_DIR = ".."
CACHE_DIR = "image_cache"
USER_EXAMPLES_JSON = "docs/pyxel_user_examples.json"
EXAMPLE_IMAGES = [
    (1, 23),
    (3, 220),
    (10, 793),
    (15, 83),
    (17, 2048),
    (22, 140),
    (24, 67),
    (25, 430),
    (43, 18),
    (46, 233),
    (50, 236),
    (52, 75),
    (53, 395),
    (54, 63),
    (62, 79),
    (63, 456),
    (67, 1),
    (68, 175),
    (72, 1),
    (73, 171),
    (77, 1),
    (78, 107),
    (79, 163),
    (81, 248),
    (83, 1),
    (86, 64),
    (88, 417),
    (89, 53),
    (91, 275),
    (92, 387),
    (95, 1),
    (101, 168),
    (102, 166),
    (104, 23),
    (110, 458),
    (111, 209),
    (112, 305),
    (113, 94),
    (114, 26),
    (116, 1),
    (120, 224),
    (121, 205),
    (123, 134),
    (127, 298),
    (134, 459),
    (136, 693),
    (140, 233),
    (141, 90),
]


def download_gif_image(url, frame):
    os.makedirs(CACHE_DIR, exist_ok=True)

    url_hash = hashlib.md5(url.encode()).hexdigest()
    cache_file = os.path.join(CACHE_DIR, f"{url_hash}_{frame}.png")

    if os.path.exists(cache_file):
        return PIL.Image.open(cache_file)

    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"HTTP error: {response.status_code}")

    gif = PIL.Image.open(io.BytesIO(response.content))
    gif.seek(frame - 1)
    image = gif.copy()

    image.save(cache_file)

    return image


def generate_thanks_image():
    os.chdir(pathlib.Path(__file__).parent / ROOT_DIR)

    with open(USER_EXAMPLES_JSON, "r", encoding="utf-8") as f:
        user_examples = json.load(f)

    images = []
    for id, frame in EXAMPLE_IMAGES:
        user_example = next(
            (x for x in user_examples["entries"] if x["id"] == id), None
        )
        url = user_example["image"]
        image = download_gif_image(url, frame)
        image = image.resize((320, int(320 * image.height / image.width)))
        images.append(image)


if __name__ == "__main__":
    generate_thanks_image()
